{"version":3,"sources":["Model/Color.ts","Model/Utils.ts","Model/Project.ts","Model/Workplace.ts","Model/Profile.ts","Components/ProjectTile.tsx","Components/WorkplaceTile.tsx","Components/ProfileView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Color","r","g","b","a","this","c","hex","toString","length","componentToHex","rgba","undefined","hexcolor","replace","parseInt","substr","darkTextColor","lightTextColor","backgroundColor","getContrastYIQ","hexValue","getWorkTimeString","startDate","endDate","start","end","concat","Project","name","company","position","jobDescription","shortDescription","longDescription","thumbnailImageUrl","dedicatedPageUrl","workTimeFooter","jsonObj","fromArray","Workplace","projects","workTime","map","project","fromJson","Profile","firstName","lastName","occupations","workplaces","join","workplace","ProjectTile","className","onClick","window","location","href","style","color","getForegroundColorForBackgroundColor","src","marginLeft","icon","faChevronRight","WorkplaceTile","i","ProfileView","profile","occupationsText","alt","App","useState","setProfile","useEffect","fetch","mode","then","response","json","data","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ab3d844.chunk.js","sourcesContent":["import { isAppInDarkMode } from './Utils'\nexport { Color }\n\nclass Color {\n\n    static lightTextColor : string = \"#ffffff\"\n    static darkTextColor : string = \"#303030\"\n\n    r : number\n    g : number\n    b : number\n    a : number\n\n    constructor(r : number, g : number, b: number, a: number = 1) {\n        this.r = r\n        this.g = g\n        this.b = b\n        this.a = a\n    }\n\n    static fromArray(rgba: number[] | undefined) : Color | undefined {\n        if (rgba === undefined) {\n            return undefined\n        } else {\n            const a = rgba[3] === undefined ? 1 : rgba[3]\n            return new Color(rgba[0], rgba[1], rgba[2], a)\n        }\n        \n    }\n\n     componentToHex(c : number) : string  {\n        var hex = c.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n      }\n      \n\n    hexValue() : string {\n        return \"#\" + this.componentToHex(this.r) + this.componentToHex(this.g) + this.componentToHex(this.b);\n    }\n    \n    private static getContrastYIQ(hexcolor : string){\n        hexcolor = hexcolor.replace(\"#\", \"\");\n        var r = parseInt(hexcolor.substr(0,2),16);\n        var g = parseInt(hexcolor.substr(2,2),16);\n        var b = parseInt(hexcolor.substr(4,2),16);\n        var yiq = ((r*299)+(g*587)+(b*114))/1000;\n        return (yiq >= 128) ? Color.darkTextColor : Color.lightTextColor;\n    }\n    \n    static getForegroundColorForBackgroundColor(backgroundColor : Color) : string{\n        return Color.getContrastYIQ(backgroundColor.hexValue())\n    }\n}","import { Color } from './Color'\nexport { getWorkTimeString, isAppInDarkMode }\n\nfunction getWorkTimeString(startDate? : Date, endDate?: Date) : string | undefined {\n    if (startDate === undefined || startDate === null) { return undefined }\n\n    let start = startDate.toString()\n\n    let end = (endDate === undefined || endDate === null) ? \"Today\" : endDate?.toString()\n    return start.concat(\" - \", end)\n}\n\nfunction isAppInDarkMode() : boolean {\n    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n}","import { Color } from './Color'\nimport { getWorkTimeString } from './Utils'\nexport { Project }\n \nclass Project {\n\n    name: string;\n    company?: string;\n    position? : string;\n    startDate?: Date;\n    endDate?: Date;\n    jobDescription?: string;\n    shortDescription?: string;\n    longDescription?: string;\n    thumbnailImageUrl?: string;\n\n    workTimeFooter?: string;\n\n    dedicatedPageUrl?: string;\n\n    backgroundColor? : Color;\n\n    constructor(name: string, company?: string, position? : string, startDate? : Date, endDate? : Date, jobDescription?: string, shortDescription?: string, longDescription?: string, thumbnailImageUrl?: string, dedicatedPageUrl?: string, backgroundColor? : Color) {\n        this.name = name;\n        this.company = company;\n        this.position = position;\n        this.startDate = startDate;\n        this.endDate = endDate;\n        this.jobDescription = jobDescription;\n        this.shortDescription = shortDescription;\n        this.longDescription = longDescription;\n        this.thumbnailImageUrl = thumbnailImageUrl;\n        this.workTimeFooter = getWorkTimeString(startDate, endDate);\n        this.dedicatedPageUrl = dedicatedPageUrl;\n        this.backgroundColor = backgroundColor;\n        \n      }\n\n      static fromJson(jsonObj: any) : Project {\n        \n        return new Project(jsonObj[\"name\"], jsonObj[\"company\"], jsonObj[\"position\"], jsonObj[\"startDate\"], jsonObj[\"endDate\"], jsonObj[\"jobDescription\"], jsonObj[\"shortDescription\"], jsonObj[\"longDescription\"], jsonObj[\"thumbnailImageUrl\"], jsonObj[\"dedicatedPageUrl\"], Color.fromArray(jsonObj[\"backgroundColor\"]))\n      }\n\n}\n\n","import { Project } from './Project'\nimport { Color } from './Color'\nimport { getWorkTimeString } from '../Model/Utils'\nexport { Workplace }\n\nclass Workplace {\n\n    name : string;\n    startDate? : Date;\n    endDate? : Date;\n    thumbnailImageUrl? : string;\n    projects : Project[];\n\n    backgroundColor? : Color;\n\n    workTime?: string;\n\n    constructor(name: string, projects : Project[], startDate? : Date, endDate? : Date, thumbnailImageUrl?: string, backgroundColor?: Color) {\n        this.name = name;\n        this.startDate = startDate;\n        this.endDate = endDate;\n        this.thumbnailImageUrl = thumbnailImageUrl;\n        this.projects = projects;\n        this.backgroundColor = backgroundColor;\n        this.workTime = getWorkTimeString(startDate, endDate)\n    }\n\n    static fromJson(jsonObj: any) : Workplace {\n        \n        const projects = (jsonObj[\"projects\"] as any[]).map(project => Project.fromJson(project))\n\n        return new Workplace(jsonObj[\"name\"], projects, jsonObj[\"startDate\"], jsonObj[\"endDate\"], jsonObj[\"thumbnailImageUrl\"], Color.fromArray(jsonObj[\"backgroundColor\"]))\n      }\n}","import { Workplace } from './Workplace'\nimport { Color } from './Color'\nexport { Profile }\n\nclass Profile {\n\n    firstName : string;\n    lastName : string;\n    thumbnailImageUrl? : string;\n    occupations : [string];\n\n    workplaces : Workplace[];\n\n    backgroundColor? : Color;\n\n    get occupationsText() : string {\n        return this.occupations.join(\", \")\n    } \n\n    constructor(firstName: string, lastName: string, occupations : [string], workplaces : Workplace[], thumbnailImageUrl?: string, backgroundColor?: Color) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.occupations = occupations;\n        this.workplaces = workplaces;\n        this.thumbnailImageUrl = thumbnailImageUrl;\n        this.backgroundColor = backgroundColor;\n    }\n\n    static fromJson(jsonObj: any) : Profile {\n        const workplaces = (jsonObj[\"workplaces\"] as any[]).map(workplace => Workplace.fromJson(workplace))\n\n        return new Profile(jsonObj[\"firstName\"], jsonObj[\"lastName\"], jsonObj[\"occupations\"], workplaces, jsonObj[\"thumbnailImageUrl\"], )\n    }\n}","import { Project } from '../Model/Project';\nimport { FunctionComponent } from 'react'\nimport { Color } from '../Model/Color'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {  faChevronRight } from '@fortawesome/free-solid-svg-icons'\nimport './ProjectTile.css';\nimport { transform } from 'typescript';\nexport { ProjectTile }\n\ninterface ProjectTileProps {\n    project : Project\n}\n\nconst ProjectTile: FunctionComponent<ProjectTileProps> = ({ project }: ProjectTileProps) => {\n    return (\n        <div className={`projectTile ${project.dedicatedPageUrl == null ? \"\" : \"pointerStyled\"}`} onClick={() => {\n            project.dedicatedPageUrl&& (\n                window.location.href = project.dedicatedPageUrl)\n            \n        }} style={project.backgroundColor && ({\n\n            backgroundColor: `${project.backgroundColor.hexValue()}`,\n            color: `${Color.getForegroundColorForBackgroundColor(project.backgroundColor)}`\n        })\n        }>\n            <div className=\"mainInfo\">\n                {\n                    project.thumbnailImageUrl && (\n                        <div className=\"thumbnailPicture\"> <img src={project.thumbnailImageUrl} /> </div>\n                    )\n                }\n                <div className=\"basicInfo\">\n           \n                    <div className=\"titleContainer\">\n                        <div>\n                            <h1>{project.name}</h1>\n                        </div>   \n\n                        {project.dedicatedPageUrl&& ( <FontAwesomeIcon style={({\n                        marginLeft : 8\n                        })} icon={faChevronRight} className={\"symbol\"} /> )}\n                    \n                    </div>\n                    \n                    {\n                        project.company && (\n                            <h2>{project.company}</h2>\n                        )\n\n                    }\n\n                    {\n                        project.position && (\n                            <h2>{project.position}</h2>\n                        )\n                    }\n\n                    {\n                        project.shortDescription && (\n                            <p>{project.shortDescription}</p>\n                        )\n                    }\n\n                </div>\n            </div>\n            <div className=\"details\">\n                {\n                    project.jobDescription && (\n                        <p>{project.jobDescription}</p>\n                    )\n                }\n\n                {\n                    project.workTimeFooter && (\n                        <footer>{project.workTimeFooter}</footer>\n                    )\n                }\n\n\n            </div>\n        </div>\n    )\n  }","import { Workplace } from '../Model/Workplace';\nimport { FunctionComponent } from 'react'\nimport { ProjectTile } from './ProjectTile'\nimport { Color } from '../Model/Color'\nimport './WorkplaceTile.css';\nexport { WorkplaceTile }\n\ninterface WorkplaceTileProps {\n    workplace : Workplace\n}\n\nconst WorkplaceTile: FunctionComponent<WorkplaceTileProps> = ({ workplace } : WorkplaceTileProps) => {\n    return (\n        <div className=\"workplaceTile\" style={workplace.backgroundColor && ({\n\n            backgroundColor: `${workplace.backgroundColor.hexValue()}`,\n            color: `${Color.getForegroundColorForBackgroundColor(workplace.backgroundColor)}`\n        })\n        }>\n            <div className=\"mainInfo\">\n                {\n                    workplace.thumbnailImageUrl && (\n                        <div className=\"thumbnailPicture\"> <img src={workplace.thumbnailImageUrl} /> </div>\n                    )\n                }\n                <div className=\"basicInfo\">\n                    <h1>{workplace.name}</h1>\n                   \n\n                    {\n                        workplace.workTime && (\n                            <h2>{workplace.workTime}</h2>\n                        )\n                    }\n\n                </div>\n            </div>\n            { workplace.projects.length !== 0 &&(\n                        <div className=\"workplaceProjects\">\n                            <h2>Projects</h2>\n                            {\n                                workplace.projects.map((project, i) => {\n                                    return (<ProjectTile key={i} project={project} />)\n                                })\n                            }\n\n                        </div>\n                    )\n           \n            }\n\n        </div>\n    )\n  }","import { Profile } from '../Model/Profile';\nimport { FunctionComponent } from 'react'\nimport { WorkplaceTile } from './WorkplaceTile'\nimport { Color } from '../Model/Color'\nimport './ProfileView.css';\nexport { ProfileView }\n\ninterface ProfileViewProps {\n    profile: Profile\n}\n\nconst ProfileView: FunctionComponent<ProfileViewProps> = ({ profile }: ProfileViewProps) => {\n    return (\n        <div className=\"profileView\" style={profile.backgroundColor && ({\n\n            backgroundColor: `${profile.backgroundColor.hexValue()}`,\n            color: `${Color.getForegroundColorForBackgroundColor(profile.backgroundColor)}`\n        })\n        }>\n            <header>\n                <div className=\"profileHeader\">\n                    {\n                        profile.thumbnailImageUrl && (\n                            <div> <img className=\"profilePicture\" src={profile.thumbnailImageUrl} /> </div>\n                        )\n                    }\n                    <div className=\"profileInfo\">\n                        <h1>{profile.firstName} {profile.lastName}</h1>\n\n\n                        {\n                            profile.occupationsText.length !== 0 && (\n                                <h2>{profile.occupationsText}</h2>\n                            )\n                        }\n\n                    </div>\n                    <div className=\"contactInfo\">\n                        <button onClick={() => { window.location.href = \"https://www.linkedin.com/in/kevin-varga-halasz/\" }} style={({ backgroundColor: \"white\" })}><img alt=\"LinkedIn\" src=\"https://cdn.worldvectorlogo.com/logos/linkedin.svg\"></img></button>\n                        <button onClick={() => { window.location.href = \"/KevinVarga.vcf\" }}><i className=\"fa-solid fa-address-card\"></i>Add to Contacts</button>\n                    </div>\n                </div>\n            </header>\n            <div className=\"body\">\n                {profile.workplaces.length !== 0 && (\n                    profile.workplaces.map((workplace, i) => {\n                        return (<WorkplaceTile key={i} workplace={workplace} />)\n                    })\n                )\n\n                }\n            </div>\n\n        </div>\n    )\n}","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { Profile } from './Model/Profile';\nimport { Color } from './Model/Color';\nimport { ProjectTile } from './Components/ProjectTile'\nimport { Project } from './Model/Project';\nimport { ProfileView } from './Components/ProfileView';\n\nfunction App() {\n\n  const [profile, setProfile]= useState<Profile | undefined>();\n\n  useEffect(() => {\n    \n    fetch('data/profile.json', {mode: 'cors'})\n      .then(response => response.json())\n      .then(data => {\n        const profile = Profile.fromJson(data)\n        console.log(profile.workplaces[0].projects[0].backgroundColor?.hexValue())\n        setProfile(profile)\n      })\n\n  }, []);\n\n  return (\n    <div className=\"App\">\n        {\n          profile && (\n\n            <ProfileView profile={profile}/>\n          )\n        }\n      <footer>Written in React & TypeScript, Copyright © Kevin Varga Halász</footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}